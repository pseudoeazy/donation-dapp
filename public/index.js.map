{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/client/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAC5B,OAAO,sBAAsB,MAAM,2BAA2B,CAAC;AAS/D,IAAM,IAAI,GAAG;IACX,SAAS,EAAE,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAqB;IACjE,QAAQ,EAAE,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAqB;IAC/D,WAAW,EAAE,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAqB;IACrE,QAAQ,EAAE,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAqB;CAChE,CAAC;AAEF,SAAe,mBAAmB;;;;;wBAChB,qBAAM,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;wBAC5C,MAAM,EAAE,qBAAqB;qBAC9B,CAAC,EAAA;;oBAFI,OAAO,GAAG,SAEd;oBACF,OAAO,CAAC,GAAG,CAAC,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;;;;;CAC1B;AAED,IAAM,iBAAiB,GAAG;;;;oBACP,qBAAM,sBAAsB,EAAE,EAAA;;gBAAzC,QAAQ,GAAG,SAA8B;gBAE/C,IAAI,QAAQ,EAAE,CAAC;oBACb,0BAA0B;oBAC1B,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;wBACpB,IAAI,CAAC;4BACH,MAAM,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;4BACxC,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;wBACvC,CAAC;wBAAC,OAAO,KAAK,EAAE,CAAC;4BACf,6BAA6B;4BAC7B,wBAAwB;4BACxB,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;wBACrD,CAAC;oBACH,CAAC;yBAAM,CAAC;wBACN,qDAAqD;wBACrD,+EAA+E;wBAC/E,OAAO,CAAC,KAAK,CACX,qEAAqE,CACtE,CAAC;wBACF,KAAK,CACH,qEAAqE,CACtE,CAAC;oBACJ,CAAC;gBACH,CAAC;qBAAM,CAAC;oBACN,oBAAoB;oBACpB,OAAO,CAAC,KAAK,CAAC,kDAAkD,CAAC,CAAC;oBAClE,KAAK,CAAC,kDAAkD,CAAC,CAAC;gBAC5D,CAAC;;;;KACF,CAAC;AAEF,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;AACnD,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC","sourcesContent":["import { Web3 } from 'web3';\r\nimport detectEthereumProvider from '@metamask/detect-provider';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    ethereum?: any;\r\n    web3?: Web3;\r\n  }\r\n}\r\n\r\nconst view = {\r\n  connectEl: document.getElementById('connect') as HTMLInputElement,\r\n  senderEl: document.getElementById('sender') as HTMLInputElement,\r\n  recipientEl: document.getElementById('recipient') as HTMLInputElement,\r\n  amountEl: document.getElementById('amount') as HTMLInputElement,\r\n};\r\n\r\nasync function requestAccountAcess() {\r\n  const account = await window.ethereum.request({\r\n    method: 'eth_requestAccounts',\r\n  });\r\n  console.log({ account });\r\n}\r\n\r\nconst connectToMetaMask = async (): Promise<void> => {\r\n  const provider = await detectEthereumProvider();\r\n\r\n  if (provider) {\r\n    // Modern dapp browsers...\r\n    if (window.ethereum) {\r\n      try {\r\n        window.web3 = new Web3(window.ethereum);\r\n        console.log('Connected to MetaMask');\r\n      } catch (error) {\r\n        // User denied account access\r\n        // alert(error.message);\r\n        console.error('User denied account access', error);\r\n      }\r\n    } else {\r\n      //---set the provider you want from Web3.providers---\r\n      //   web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\r\n      console.error(\r\n        'Non-MetaMask browser detected. You should consider trying MetaMask!'\r\n      );\r\n      alert(\r\n        'Non-MetaMask browser detected. You should consider trying MetaMask!'\r\n      );\r\n    }\r\n  } else {\r\n    // Non-dapp browsers\r\n    console.error('No Ethereum provider detected. Install MetaMask.');\r\n    alert('No Ethereum provider detected. Install MetaMask.');\r\n  }\r\n};\r\n\r\nwindow.addEventListener('load', connectToMetaMask);\r\nview.connectEl.addEventListener('click', requestAccountAcess);\r\n"]}